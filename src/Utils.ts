import crypto from "crypto";

const Utils = {
  hash: (txt: string) => crypto.createHash("md5").update(txt).digest("hex"),
  sleep: (ms: number) => new Promise((r) => setTimeout(r, ms)),
  numF: new Intl.NumberFormat("de-DE").format,
  centerText: (text: string, char = "#", padding = 2) => {
    const textLength = text.replace(/\x1b\[[0-9;]*m/gm, "").length,
      columns = process.stdout.columns || 80;
    if (columns < textLength) return text;
    var terminalWidth = Math.floor((columns - textLength) / 2) - padding;
    terminalWidth < 0 && (terminalWidth *= -1);
    return `${char.repeat(terminalWidth)}${" ".repeat(
      padding
    )}${text}${" ".repeat(padding)}${char.repeat(
      terminalWidth + ((columns - textLength) % 2)
    )}`;
  },
  header: (text: string) =>
    console.log(
      [
        "\n\n",
        "#".repeat(process.stdout.columns || 80),
        Utils.centerText(`\x1b[36m${text}\x1b[0m`),
        "#".repeat(process.stdout.columns || 80),
      ].join("\n")
    ),
  path: {
    isAbsolute: (path: string) => /^(?:[A-Za-z]:\\)|(\/)/.test(path),
  },
  htmlDecode: (txt: string) =>
    [
      ['"', "&quot;"],
      ["'", "&apos;"],
      ["&", "&amp;"],
      ["<", "&lt;"],
      [">", "&gt;"],
      [" ", "&nbsp;"],
      ["¡", "&iexcl;"],
      ["¢", "&cent;"],
      ["£", "&pound;"],
      ["¤", "&curren;"],
      ["¥", "&yen;"],
      ["¦", "&brvbar;"],
      ["§", "&sect;"],
      ["¨", "&uml;"],
      ["©", "&copy;"],
      ["ª", "&ordf;"],
      ["«", "&laquo;"],
      ["¬", "&not;"],
      ["­", "&shy;"],
      ["®", "&reg;"],
      ["¯", "&macr;"],
      ["°", "&deg;"],
      ["±", "&plusmn;"],
      ["²", "&sup2;"],
      ["³", "&sup3;"],
      ["´", "&acute;"],
      ["µ", "&micro;"],
      ["¶", "&para;"],
      ["·", "&middot;"],
      ["¸", "&cedil;"],
      ["¹", "&sup1;"],
      ["º", "&ordm;"],
      ["»", "&raquo;"],
      ["¼", "&frac14;"],
      ["½", "&frac12;"],
      ["¾", "&frac34;"],
      ["¿", "&iquest;"],
      ["×", "&times;"],
      ["÷", "&divide;"],
      ["À", "&Agrave;"],
      ["Á", "&Aacute;"],
      ["Â", "&Acirc;"],
      ["Ã", "&Atilde;"],
      ["Ä", "&Auml;"],
      ["Å", "&Aring;"],
      ["Æ", "&AElig;"],
      ["Ç", "&Ccedil;"],
      ["È", "&Egrave;"],
      ["É", "&Eacute;"],
      ["Ê", "&Ecirc;"],
      ["Ë", "&Euml;"],
      ["Ì", "&Igrave;"],
      ["Í", "&Iacute;"],
      ["Î", "&Icirc;"],
      ["Ï", "&Iuml;"],
      ["Ð", "&ETH;"],
      ["Ñ", "&Ntilde;"],
      ["Ò", "&Ograve;"],
      ["Ó", "&Oacute;"],
      ["Ô", "&Ocirc;"],
      ["Õ", "&Otilde;"],
      ["Ö", "&Ouml;"],
      ["Ø", "&Oslash;"],
      ["Ù", "&Ugrave;"],
      ["Ú", "&Uacute;"],
      ["Û", "&Ucirc;"],
      ["Ü", "&Uuml;"],
      ["Ý", "&Yacute;"],
      ["Þ", "&THORN;"],
      ["ß", "&szlig;"],
      ["à", "&agrave;"],
      ["á", "&aacute;"],
      ["â", "&acirc;"],
      ["ã", "&atilde;"],
      ["ä", "&auml;"],
      ["å", "&aring;"],
      ["æ", "&aelig;"],
      ["ç", "&ccedil;"],
      ["è", "&egrave;"],
      ["é", "&eacute;"],
      ["ê", "&ecirc;"],
      ["ë", "&euml;"],
      ["ì", "&igrave;"],
      ["í", "&iacute;"],
      ["î", "&icirc;"],
      ["ï", "&iuml;"],
      ["ð", "&eth;"],
      ["ñ", "&ntilde;"],
      ["ò", "&ograve;"],
      ["ó", "&oacute;"],
      ["ô", "&ocirc;"],
      ["õ", "&otilde;"],
      ["ö", "&ouml;"],
      ["ø", "&oslash;"],
      ["ù", "&ugrave;"],
      ["ú", "&uacute;"],
      ["û", "&ucirc;"],
      ["ü", "&uuml;"],
      ["ý", "&yacute;"],
      ["þ", "&thorn;"],
      ["ÿ", "&yuml;"],
    ].reduce((a, b) => a.replaceAll(b[1], b[0]), txt),
};

export default Utils;
